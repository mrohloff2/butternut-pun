import ipaddressimport xmltodictfrom ncclient import manager"""Max Rohloff4/17/2023Purpose: Pull information from RESTCONF to access interface information from our IOS XE devices then change the IP address information by asking the user which interface and IP they would like to change"""#Gets dictionaries for usedef getInfo(ipAddr):    router = {"host": ipAddr, "port": "830",              "username": "cisco", "password": "cisco"}    xmlInt = """<config xmlns:xc="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns = "urn:ietf:params:xml:ns:netconf:base:1.0">          		<native xmlns="http://cisco.com/ns/yang/Cisco-IOS-XE-native">        			<interface>                                    <%intName%>        				<name>%intNum%</name>        				<ip>                                                                                <address>                                                <primary>                                                    <address>%addr%</address>                                                    <mask>%mask%</mask>                                                 </primary>                                            </address>                                           				</ip>				        			    </GigabitEthernet>        			</interface>                        </native>                </config>"""    ### xmlns:xc added for ios xe 17.x and greater    netconf_filter = """        <interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces">            <interface></interface>        </interfaces>        """    with manager.connect(host=router['host'],port=router['port'],username=router['username'],password=router['password'],hostkey_verify=False) as m:        netconf_reply = m.get_config(source = 'running', filter = ("subtree",netconf_filter))    netconf_data = xmltodict.parse(netconf_reply.xml)["rpc-reply"]["data"]    interfaces = netconf_data["interfaces"]["interface"]    return xmlInt, router, interfaces#Prints the dictionary in a nice mannerdef printInts(interfaces):    print("Int                  IP               Subnet Mask                  Description")    print("_________________________________________________________________________________")    for i in interfaces:        if i["name"] != "Loopback0":            print(i["name"], end="   ")            print(i["ipv4"]["address"]["ip"], end="   ")            print(i["ipv4"]["address"]["netmask"], end="   ")            print(i["description"])#Verifies that the new IP address is validdef verifyIP(IPadd):    a = 0    check = 0    IPaddsplit = IPadd.split(".")    # If statements for checking if IP address is valid    if len(IPaddsplit) == 4:        for c in range(4):            if (int(IPaddsplit[c]) <= 255 and int(IPaddsplit[c]) >= 0):                a += 1        if a == 4:            check += 1            a = 0            return True        else:            print("Your IP address is not valid, please review proper IP addressing configuration")            return False    else:        print("Your IP address is not valid, please review proper IP addressing configuration")        return False#Checks the subnet mask to make sure its validdef checkMask(intIP, ipmask):    if (int(ipmask)) <= 32 and (int(ipmask)) > 0:        Verify = True        combintIP = intIP + "/" + ipmask        add = ipaddress.IPv4Interface(combintIP)        add = (str(add.with_netmask)).split("/")        ipmask = str(add[1])        return Verify, ipmask    else:        print("Subnet mask should be a number between 1 - 32")        return False#Updates the IP address for the given interfacedef changeInt(xmlInt, router, intIP, ipmask, count):    count = count    xmlInt = xmlInt.replace("%addr%", intIP)    xmlInt = xmlInt.replace("%intName%", "GigabitEthernet")    xmlInt = xmlInt.replace("%intNum%", count)    xmlInt = xmlInt.replace("%mask%", ipmask)    with manager.connect(host=router['host'], port=router['port'], username=router['username'],                         password=router['password'], hostkey_verify=False) as m:        netconf_reply = m.edit_config(target='running', config=xmlInt)def main():    test = False    host = ""    Verify = False    c=0    count = 0    ips = {"10.10.20.175":"dist-rtr01","10.10.20.176":"dist-rtr02"}    ipAddr = ""    while test == False:        ipAddr = input("Please enter an IP address for a IOS XE device: ")        try:            host = ips[ipAddr]            print("Host name: ", host)            xmlInts, router, interfaces = getInfo(ipAddr)            printInts(interfaces)            test = True        except:            print("The given IP address was not correct. Please try again.\n")    test = False    while test == False:        c=0        intName = input("Which interface would you like to edit?\n")        for i in interfaces:            c+=1            if intName == i["name"]:                test = True                print(c)                count = str(c)                print(count)        if test == False:            print("Invalid Interface")    test = False    while test == False:        intIP = input("Please enter a valid IP address to change the interface to?\n")        test = verifyIP(intIP)        if test == True:            while Verify == False:                ipmask = input("Please enter the subnet mask: \n")                Verify, mask = checkMask(intIP, ipmask)    try:        changeInt(xmlInts, router, intIP, mask, count)    except:        print("The given IP address and Subnet were not accepted by the device, please try again.")    host = ips[ipAddr]    print("########################")    print("Host name: ", host)    xmlInt, router, interfaces = getInfo(ipAddr)    printInts(interfaces)main()